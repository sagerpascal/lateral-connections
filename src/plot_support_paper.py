import matplotlib.pyplot as plt
import numpy as np

LAMBDA = 1.2 * 11
X_MAX = 16

min_support_active = [1, 4.6, 10.5, 10.6, 9.5, 9.7, 9.6, 9.8, 9.7, 9.7]
max_support_active = [1, 9.4, 20.3, 20.2, 20.7, 20.6, 20.7, 20.5, 20.8, 20.7]
avg_support_active = [1, 6.9, 15.4, 15.4, 15.7, 15.7, 15.7, 15.7, 15.7, 15.7]
avg_support_inactive = [0, 0.32, 0.33, 0.41, 0.37, 0.35, 0.34, 0.33, 0.33, 0.33]
max_support_active = [min(x, LAMBDA) for x in max_support_active]


# min_support_active_inhibition = [x if x <= LAMBDA else LAMBDA - (x - LAMBDA) * 0.5 for x in min_support_active]
# max_support_active_inhibition = [min(LAMBDA, x) for x in max_support_active]
avg_support_active = [x if x <= LAMBDA else LAMBDA - (x - LAMBDA) * 0.5 for x in avg_support_active]


avg_support_active_alt = [1.833333333, 3.989072046, 6.088545845, 7.331238983, 6.438297955, 7.896718004, 8.848730876, 9.045676443, 8.53915927, 8.50136621, 8.600396474, 9.036965774, 8.954676367, 9.579620322, 9.445945464, 9.4472909, 9.827499065, 10.34750045, 10.37563629, 10.72394369, 10.19581514, 10.0822101, 11.02144325, 10.64001169, 10.70798367, 11.6548053, 11.62419867, 12.17521638, 11.50001701, 11.46759174, 11.47247353, 11.44473785, 11.29620347, 11.1465952, 10.98963686, 11.29921451, 11.04388391, 11.20194091, 10.81072781, 11.16283595, 11.21661653, 11.38000726, 11.16292399, 11.34803942, 11.50581073, 11.18714088, 11.04019248, 11.02037993, 11.21621904, 10.92246357, 11.36683643, 11.28112263, 11.33205211, 10.96827477, 11.32603244, 11.22708456, 11.4256004, 11.17968472, 11.3405833, 11.11959553, 11.26551035, 11.34161776, 11.04434243, 11.1726938, 11.04849968, 11.47827321, 11.4412302, 10.66684212, 11.29918805, 11.3129843, 10.77264634, 11.1630063, 11.30261645, 11.32747109, 11.3391388, 11.38311652, 11.37822225, 10.80393909, 11.11411286, 10.95604819, 11.16614502, 11.18767176, 11.16127422, 11.12666696, 11.04493405, 10.80486077, 11.44383241, 11.15751977, 11.31450915, 11.12756706, 11.12928881, 11.47705453, 11.13804908, 11.28196383, 11.43804406, 11.1320763, 11.08161545, 11.15347676, 11.09053148, 11.17148945, 11.08993152, 11.22677695]
min_support_active_alt = [1.833333333, 1.82949467, 1.89223779, 2.116981518, 2.059827421, 2.538022425, 2.631400332, 2.885316426, 2.453958504, 2.412307269, 2.320576698, 2.743528727, 2.970086776, 3.058016947, 2.748284136, 2.768460017, 2.986125432, 2.82076188, 2.76547222, 2.869692606, 3.043828438, 2.916771949, 2.970268246, 2.74544844, 2.84578412, 3.042301867, 3.180077988, 3.268025615, 3.295186234, 3.312670158, 3.251772491, 3.361959177, 3.391066554, 3.328859347, 3.343731426, 3.35323979, 3.338561278, 3.389608492, 3.404893107, 3.490326615, 3.45231571, 3.482463868, 3.493772094, 3.558299265, 3.502920953, 3.459929839, 3.437503573, 3.452127465, 3.507121076, 3.430985515, 3.477715188, 3.439117994, 3.495017213, 3.439574448, 3.477081371, 3.441847287, 3.465805372, 3.439962793, 3.486216454, 3.424524235, 3.438233234, 3.486400148, 3.448032925, 3.468812536, 3.467675685, 3.467787158, 3.521431487, 3.454951717, 3.453659992, 3.464332132, 3.441921806, 3.46640578, 3.494021506, 3.482237273, 3.42841112, 3.446074227, 3.498297038, 3.465177027, 3.453462929, 3.458573711, 3.466840318, 3.515848866, 3.468530017, 3.477384536, 3.466255331, 3.43188731, 3.518007474, 3.455784759, 3.421314015, 3.453070265, 3.451306414, 3.436411374, 3.45655638, 3.508992332, 3.478707706, 3.465105449, 3.479090094, 3.497060954, 3.490597716, 3.471000413, 3.485288802, 3.521760848]
max_support_active_alt = [1.833333333, 7.780214275, 12.75419108, 14.65758687, 13.61893077, 15.79561574, 16.16796027, 16.55684078, 16.67955465, 16.99636783, 17.11237313, 17.43091897, 16.93865873, 17.78728197, 17.25120114, 17.48373164, 17.79245321, 18.19682334, 18.03578771, 18.67398588, 18.28681567, 18.24818845, 19.08803527, 19.23032578, 19.35891456, 19.58581431, 20.10618533, 20.42693421, 20.15954405, 20.42443922, 20.57911195, 20.48034406, 20.47741848, 20.37296165, 20.05434934, 20.43393192, 20.30694797, 20.28792996, 19.88177349, 20.45299598, 20.29506211, 20.53532031, 20.24059596, 20.4633307, 20.82790327, 20.37366507, 20.32291307, 20.16184087, 20.4177823, 19.70338122, 20.49014983, 20.4334762, 20.58266513, 19.75770767, 20.4268415, 20.39774688, 20.7452022, 20.24773697, 20.41765377, 20.12762615, 20.53465171, 20.59173193, 20.29387311, 20.30060226, 20.08126412, 20.63914561, 20.59690729, 19.93593644, 20.62998171, 20.61693528, 19.93246313, 20.30727599, 20.62799062, 20.05229572, 20.37570509, 20.5804494, 20.70350194, 20.0609343, 20.13955502, 20.23188138, 20.42457141, 20.28600116, 20.04656591, 20.43096697, 20.24254577, 19.86825663, 20.55223352, 20.39698091, 20.47688052, 20.2200978, 20.4063807, 20.54136419, 20.21912073, 20.51903049, 20.72501123, 20.29477706, 20.05278664, 20.01366178, 20.36285448, 20.45785946, 20.27940901, 20.27656938]
avg_support_inactive_alt = [0.017643489, 0.045218844, 0.069092655, 0.083233598, 0.093347352, 0.102105514, 0.106341274, 0.10871937, 0.114446333, 0.121227564, 0.127926321, 0.134598918, 0.139240885, 0.141633824, 0.143320934, 0.149685883, 0.155831412, 0.159770069, 0.161515588, 0.163256061, 0.162137743, 0.169546369, 0.175391732, 0.178579444, 0.176219443, 0.185710599, 0.187553102, 0.185707316, 0.184830258, 0.182508244, 0.185167183, 0.195248882, 0.191406296, 0.192412759, 0.189719269, 0.194328102, 0.186859245, 0.184509023, 0.191587371, 0.194774402, 0.188760887, 0.197895353, 0.194778946, 0.195147905, 0.194326256, 0.196874495, 0.188105586, 0.184519719, 0.198515994, 0.183550721, 0.192351167, 0.183987312, 0.190819078, 0.185707427, 0.193339752, 0.192957628, 0.194616515, 0.184123365, 0.195613698, 0.1900699, 0.190320051, 0.192031535, 0.189844792, 0.185943403, 0.18421279, 0.192078572, 0.196968698, 0.189303627, 0.187541405, 0.186937058, 0.186936267, 0.195382919, 0.19814421, 0.194905547, 0.196102172, 0.195879024, 0.193782417, 0.1838681, 0.189896092, 0.184072029, 0.189736636, 0.195318029, 0.192948382, 0.193134556, 0.196382738, 0.188977245, 0.187455055, 0.191589446, 0.194710679, 0.191632577, 0.197828748, 0.196675003, 0.19548433, 0.193246027, 0.200244132, 0.194800446, 0.187995471, 0.194109907, 0.192002142, 0.194270553, 0.196004948, 0.18957352]
max_support_active_alt = [min(x, LAMBDA) for x in max_support_active_alt]

avg_support_active_alt = avg_support_active_alt[:50]
min_support_active_alt = min_support_active_alt[:50]
max_support_active_alt = max_support_active_alt[:50]
avg_support_inactive_alt = avg_support_inactive_alt[:50]

def print_support_active_cells(min_support_active, max_support_active, avg_support_active, avg_support_inactive):
    x = np.arange(1, len(avg_support_active) + 1, 1)

    fig, ax = plt.subplots(dpi=100, figsize=(8, 4))
    # ax.plot(x, avg_support_active, label="avg. support active cells (without inhibition)")
    # ax.fill_between(x, min_support_active, max_support_active, color='b', alpha=.15,
    #                 label="min/max support (without inhibition)")

    ax.plot(x, avg_support_active, label="avg. support active cells", color='b')
    ax.fill_between(x, min_support_active, max_support_active, color='b', alpha=.15,
                    label="min/max support")

    ax.plot(x, [LAMBDA] * len(avg_support_active), color='r', linestyle='--', label="Î»")
    ax.plot(x, avg_support_inactive, label="avg. support inactive cells", color='orange')
    plt.legend()
    plt.ylabel("Support Strength")
    plt.xlabel("Epoch")
    plt.yticks(np.arange(0, X_MAX + 1, 2), np.arange(0, X_MAX + 1, 2))
    d = 1 if len(avg_support_active) < 20 else 2
    plt.xticks(np.arange(0, len(avg_support_active) + 1, d), np.arange(0, len(avg_support_active) + 1, d))
    plt.xlim(1, len(avg_support_active))
    plt.ylim(0, X_MAX)
    plt.tight_layout()
    plt.grid()
    plt.show()


if __name__ == '__main__':
    print_support_active_cells(min_support_active, max_support_active, avg_support_active, avg_support_inactive)
    print_support_active_cells(min_support_active_alt, max_support_active_alt, avg_support_active_alt,
                               avg_support_inactive_alt)


